This is ossdev.info, produced by makeinfo version 4.3 from
../book/ossdev/main.texi.

START-INFO-DIR-ENTRY
* CVS Book: (cvsbook).          A CVS tutorial and reference.
END-INFO-DIR-ENTRY

Copyright (C) 1999, 2000 Karl Fogel <kfogel@red-bean.com>

This document is free software; you can redistribute and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

This manual describes how to use and administer CVS (Concurrent Versions
System).  It is part of a larger work entitled `Open Source Development
With CVS'; please see the introduction for details.

This is version 1.21 of this manual.


File: ossdev.info,  Node: I just committed some files with the wrong log message,  Next: I need to move files around without losing revision history,  Prev: Can I copy .cvspass files or portions of them?,  Up: Some Real Life Problems (With Solutions)

I just committed some files with the wrong log message
------------------------------------------------------

You don't need to hand-edit anything in the repository to solve this.
Just run admin with the -m flag.  Remember to have no space between -m
and its argument, and to quote the replacement log message as you would
a normal one:

     floss$ cvs admin -m1.17:'I take back what I said about the customer.' hello.c


File: ossdev.info,  Node: I need to move files around without losing revision history,  Next: How can I get a list of all tags in a project?,  Prev: I just committed some files with the wrong log message,  Up: Some Real Life Problems (With Solutions)

I need to move files around without losing revision history
-----------------------------------------------------------

In the repository, copy (don't move) the RCS files to the desired new
location in the project.  They must remain in their old locations as
well.  Then, in a working copy, do:

     floss$ rm oldfile1 oldfile2 ...
     floss$ cvs remove oldfile1 oldfile2 ...
     floss$ cvs commit -m Å“removed from hereÅ” oldfile1 oldfile2 ...

When people do updates after that, CVS correctly removes the old files
and brings the new files into the working copies just as though they had
been added to the repository in the usual way (except that they'll be at
unusually high revision numbers for supposedly new files).


File: ossdev.info,  Node: How can I get a list of all tags in a project?,  Next: How can I get a list of all projects in a repository?,  Prev: I need to move files around without losing revision history,  Up: Some Real Life Problems (With Solutions)

How can I get a list of all tags in a project?
----------------------------------------------

Currently, there is no convenient way to do this in CVS.  The lack is
sorely felt by all users, and I believe work is under way to make this
feature available.  By the time you read this, a `cvs tags' command or
something similar may be available.

Until then, there are workarounds.  You can run cvs log -h and read the
sections of the output following the header `symbolic names:'.  Or, if
you happen to be on the repository machine, you can just look at the
beginnings of some of the RCS files directly in the repository.  All of
the tags (branches and nonbranches) are listed in the `symbols' field:

     floss$ head /usr/local/newrepos/hello.c,v
     head	2.0;
     access;
     symbols
     	Release_1_0:1.22
     	Exotic_Greetings-2:1.21
     	merged-Exotic_Greetings-1:1.21
     	Exotic_Greetings-1:1.21
     	merged-Exotic_Greetings:1.21
     	Exotic_Greetings-branch:1.21.0.2
     	Root-of-Exotic_Greetings:1.21
     	start:1.1.1.1
     	jrandom:1.1.1;
     locks; strict;
     comment	@ * @;


File: ossdev.info,  Node: How can I get a list of all projects in a repository?,  Next: Some commands fail remotely but not locally; how should I debug?,  Prev: How can I get a list of all tags in a project?,  Up: Some Real Life Problems (With Solutions)

How can I get a list of all projects in a repository?
-----------------------------------------------------

As with getting a list of tags, this is not implemented in the most
current version of CVS, but it's highly likely that it will be
implemented soon.  I imagine the command will be called cvs list with a
short form of cvs ls, and it probably will both parse the modules file
and list the repository subdirectories.

In the meantime, examining the CVSROOT/modules file (either directly or
by running cvs checkout -c) is probably your best bet.  However, if no
one has explicitly made a module for a particular project, it won't show
up there.


File: ossdev.info,  Node: Some commands fail remotely but not locally; how should I debug?,  Next: I do not see my problem covered in this chapter,  Prev: How can I get a list of all projects in a repository?,  Up: Some Real Life Problems (With Solutions)

Some commands fail remotely but not locally; how should I debug?
----------------------------------------------------------------

Sometimes there's a problem in the communication between the client and
the server.  If so, it's a bug in CVS, but how would you go about
tracking down such a thing?

CVS gives you a way to watch the protocol between the client and server.
Before you run the command on the local (working copy) machine, set the
environment variable `CVS_CLIENT_LOG'.  Here's how in Bourne shell
syntax:

     floss$ CVS_CLIENT_LOG=clog; export CVS_CLIENT_LOG

Once that variable is set, CVS will record all communications between
client and server in two files whose names are based on the variable's
value:

     floss$ ls
     CVS/        README.txt    a-subdir/    b-subdir/    foo.gif     hello.c
     floss$ cvs update
     ? clog.in
     ? clog.out
     cvs server: Updating .
     cvs server: Updating a-subdir
     cvs server: Updating a-subdir/subsubdir
     cvs server: Updating b-subdir
     floss$ ls
     CVS/              a-subdir/    clog.in     foo.gif
     README.txt        b-subdir/    clog.out    hello.c
     floss$

The `clog.in' file contains everything that the client sent into the
server, and `clog.out' contains everything the server sent back out to
the client.  Here are the contents of clog.out, to give you a sense of
what the protocol looks like:

     Valid-requests Root Valid-responses valid-requests Repository           \
     Directory Max-dotdot Static-directory Sticky Checkin-prog Update-prog   \
     Entry Kopt Checkin-time Modified Is-modified UseUnchanged Unchanged     \
     Notify Questionable Case Argument Argumentx Global_option Gzip-stream   \
     wrapper-sendme-rcsOptions Set expand-modules ci co update diff log add  \
     remove update-patches gzip-file-contents status rdiff tag rtag import   \
     admin export history release watch-on watch-off watch-add watch-remove  \
     watchers editors init annotate noop
     ok
     M ? clog.in
     M ? clog.out
     E cvs server: Updating .
     E cvs server: Updating a-subdir
     E cvs server: Updating a-subdir/subsubdir
     E cvs server: Updating b-subdir
     ok

The clog.in file is even more complex, because it has to send revision
numbers and other per-file information to the server.

There isn't space here to document the client/server protocol, but you
can read the `cvsclient' Info pages that were distributed with CVS for
a complete description.  You may be able to figure out a good deal of
it just from reading the raw protocol itself.  Although you probably
won't find yourself using client logging until you've eliminated all of
the other possible causes of a problem, it is an invaluable tool for
finding out what's really going on between the client and server.


File: ossdev.info,  Node: I do not see my problem covered in this chapter,  Next: I think I have discovered a bug in CVS; what do I do?,  Prev: Some commands fail remotely but not locally; how should I debug?,  Up: Some Real Life Problems (With Solutions)

I do not see my problem covered in this chapter
-----------------------------------------------

Email an accurate and complete description of your problem to
<info-cvs@gnu.org>, the CVS discussion list.  Its members are located
in many different time zones, and I've usually gotten a response within
an hour or two of sending a question.  Please join the list by sending
email to <info-cvs-request@gnu.org>, so you can help answer questions,
too.


File: ossdev.info,  Node: I think I have discovered a bug in CVS; what do I do?,  Next: I have implemented a new feature for CVS; to whom do I send it?,  Prev: I do not see my problem covered in this chapter,  Up: Some Real Life Problems (With Solutions)

I think I have discovered a bug in CVS; what do I do?
-----------------------------------------------------

CVS is far from perfect - if you've already tried reading the manual
and posting a question on the mailing list, and you still think you're
looking at a bug, then you probably are.

Send as complete a description of the bug as you can to
<bug-cvs@gnu.org> (you can also subscribe to that list; just use
<bug-cvs-request@gnu.org> instead).  Be sure to include the version
number of CVS (both client and server versions, if applicable), and a
recipe for reproducing the bug.

If you have written a patch to fix the bug, include it and mention on
the subject line of your message that you have a patch.  The maintainers
will be very grateful.

(Further details about these procedures are outlined in the node `BUGS'
in the Cederqvist manual and the file HACKING in the source
distribution.)


File: ossdev.info,  Node: I have implemented a new feature for CVS; to whom do I send it?,  Next: How can I keep up with changes to CVS?,  Prev: I think I have discovered a bug in CVS; what do I do?,  Up: Some Real Life Problems (With Solutions)

I have implemented a new feature for CVS; to whom do I send it?
---------------------------------------------------------------

Same as with a bug: Send the patch to <bug-cvs@gnu.org>.  Make sure
you've read over the HACKING file first, though.


File: ossdev.info,  Node: How can I keep up with changes to CVS?,  Prev: I have implemented a new feature for CVS; to whom do I send it?,  Up: Some Real Life Problems (With Solutions)

How can I keep up with changes to CVS?
--------------------------------------

The troubleshooting techniques and known bugs described in this chapter
are accurate as of (approximately) CVS Version 1.10.7.  Things move fast
in the CVS world, however.  While I was writing the last few chapters,
the unofficial mantle of CVS maintainership passed from Cyclic Software
to SourceGear, Inc (`http://www.sourcegear.com'), which purchased
Cyclic.  SourceGear has publicly announced its intention to take an
active role in CVS maintainer-ship and has received Cyclic's approval,
which is more or less enough to make it the "lead maintainer" of CVS as
of right now.  (The `http://www.cyclic.com' address will continue to
work, however, so all of the URLs given previously in this book should
remain valid.)

SourceGear is, at this very moment, busy organizing and cleaning up
various patches that have been floating around, with the intention of
incorporating many of them into CVS.  Some of these patches will
probably fix bugs listed previously, and others may afford new
troubleshooting tools to CVS users.

The best way to stay up to date with what's going on is to read the NEWS
file in your CVS distribution, watch the mailing lists, and look for
changes to the Cederqvist manual and the online version of this book
(`http://cvsbook.red-bean.com').


File: ossdev.info,  Node: CVS Reference,  Next: Third-Party Tools,  Prev: Tips And Troubleshooting,  Up: Top

CVS Reference
*************

This chapter is a complete reference to CVS commands, repository
administrative files, keyword substitution, run control files, working
copy files, and environment variables - everything in CVS as of CVS
version 1.10.7 (more accurately, as of August 20, 1999).

* Menu:

* Commands And Options::                 All CVS global options and commands.
* Keyword Substitution (RCS Keywords)::  CVS can maintain some text for you.
* Repository Administrative Files::      Server-side files affecting CVS.
* Run Control Files::                    Client-side files affecting CVS.
* Working Copy Files::                   Administrivia in the working copy.
* Environment Variables::                Environment variables affecting CVS.


File: ossdev.info,  Node: Commands And Options,  Next: Keyword Substitution (RCS Keywords),  Up: CVS Reference

Commands And Options
====================

This section is a reference to all CVS commands.  If you are not already
familiar with the syntactic conventions shared by most CVS commands, you
should probably read the relevant subsections before you look up any
particular command.

* Menu:

* Organization And Conventions::        How to read this section.
* General Patterns In CVS Commands::    CVS commands share some properties.
* Date Formats::                        CVS accepts a variety of date formats.
* Global Options::                      A list of all global options to CVS.
* add::                                 The `add' command.
* admin::                               The `admin' command.
* annotate::                            The `annotate' command.
* checkout::                            The `checkout' command.
* commit::                              The `commit' command.
* diff::                                The `diff' command.
* edit::                                The `edit' command.
* editors::                             The `editors' command.
* export::                              The `export' command.
* gserver::                             The `gserver' command.
* history::                             The `history' command.
* import::                              The `import' command.
* init::                                The `init' command.
* kserver::                             The `kserver' command.
* log::                                 The `log' command.
* login::                               The `login' command.
* logout::                              The `logout' command.
* pserver::                             The `pserver' command.
* rdiff::                               The `rdiff' command.
* release::                             The `release' command.
* remove::                              The `remove' command.
* rtag::                                The `rtag' command.
* server::                              The `server' command.
* status::                              The `status' command.
* tag::                                 The `tag' command.
* unedit::                              The `unedit' command.
* update::                              The `update' command.
* watch::                               The `watch' command.
* watchers::                            The `watchers' command.


File: ossdev.info,  Node: Organization And Conventions,  Next: General Patterns In CVS Commands,  Up: Commands And Options

Organization And Conventions
----------------------------

This section is organized alphabetically to make it easy for you to look
up a particular command or option.  The following conventions are used:

   * Arguments to commands and options are in all-capitalized letters
     in the synopsis that begins each explanation.  (Note: in the
     treeware version of the book, meta-arguments are italicized as
     well as capitalized; due to the limitations of standard terminal
     fonts, I have omitted the italicization here.)

   * Optional items appear between square brackets: `[ ]'.  (This works
     out okay because square brackets turn out not used in CVS
     syntaces.)

   * If you must choose one from a set, the choices are separated by
     bars, like this: `x|y|z'.  (And therefore forward slashes (`/')
     should be interpreted literally - they do not divide choices in a
     set.)

   * Plurals or ellipses indicate multiples, usually separated by
     whitespace.  For example, FILES means one or more files, but
     [FILES] means zero or more files.  The entry [&MOD...] means an
     ampersand followed immediately by a module name, then whitespace,
     then maybe another ampersand-module, and so on, zero or more
     times.  (The ellipsis is used because a plural would have left it
     unclear whether the ampersand is needed only the first time or
     once for each module.)

     When a plural is parenthesized, as in FILE(S), it means that
     although technically there can be two or more files, usually there
     is only one.

   * REV is often used to stand for a revision argument.  This is
     usually either a revision number or a tag name.  There are very
     few places in CVS where you can use one but not the other, and
     those places are noted in the text.



File: ossdev.info,  Node: General Patterns In CVS Commands,  Next: Date Formats,  Prev: Organization And Conventions,  Up: Commands And Options

General Patterns In CVS Commands
--------------------------------

CVS commands follow this form:

     cvs [GLOBAL_OPTIONS] COMMAND [OPTIONS] [FILES]

The second set of options is sometimes called "command options".
Because there are so many of them, though, I'll just call them "options"
in most places to save space.

Many commands are meant to be run within a working copy and, therefore,
may be invoked without file arguments.  These commands default to all of
the files in the current directory and below.  So when I refer to the
"file" or "files" in the text, I'm talking about the files on which CVS
is acting.  Depending on how you invoked CVS, these files may or may not
have been explicitly mentioned on the command line.


File: ossdev.info,  Node: Date Formats,  Next: Global Options,  Prev: General Patterns In CVS Commands,  Up: Commands And Options

Date Formats
------------

Many options take a date argument.  CVS accepts a wide variety of date
formats - too many to list here.  When in doubt, stick with the
standard ISO 8601 format:

     1999-08-23

This means "23 August 1999" (in fact, "23 August 1999" is a perfectly
valid date specifier too, as long as you remember to enclose it in
double quotes).  If you need a time of day as well, you can do this:

     "1999-08-23 21:20:30 CDT"

You can even use certain common English constructs, such as "now",
"yesterday", and "12 days ago".  In general, you can safely experiment
with date formats; if CVS understands your format at all, it most likely
will understand it in the way you intended.  If it doesn't understand,
it will exit with an error immediately.


File: ossdev.info,  Node: Global Options,  Next: add,  Prev: Date Formats,  Up: Commands And Options

Global Options
--------------

Here are all the global options to CVS.

`--allow-root=REPOSITORY'
=========================

The alphabetically first global option is one that is virtually never
used on the command line.  The -allow-root option is used with the
`pserver' command to allow authenticated access to the named repository
(which is a repository top level, such as `/usr/local/newrepos', not a
project subdirectory such as `/usr/local/newrepos/myproj').

This global option is virtually never used on the command line.
Normally, the only place you'd ever use it is in /etc/inetd.conf files
(see *Note Repository Administration::), which is also about the only
place the `pserver' command is used.

Every repository to be accessed via `cvs pserver' on a given host needs
a corresponding -allow-root option in `/etc/inetd.conf'.  This is a
security device, meant to ensure that people can't use a CVS pserver to
gain access to private repositories.

(See *Note The Password-Authenticating Server:: also the node `Password
Authentication Server' in the Cederqvist manual.)

`-a'
====

This authenticates all communications with the server.  This option has
no effect unless you're connecting via the GSSAPI server (gserver).
GSSAPI connections are not covered in this book, because they're still
somewhat rarely used (although that may change).  (See the nodes
`Global Options' and `GSSAPI Authenticated' in the Cederqvist manual
for more information.)

`-b' (Obsolete)
===============

This option formerly specified the directory where the RCS binaries
could be found.  CVS now implements the RCS functions internally, so
this option has no effect (it is kept only for backward compatibility).

`-d' REPOSITORY
===============

This specifies the repository, which might be an absolute pathname or a
more complex expression involving a connection method, username and
host, and path.  If it is an expression specifying a connection method,
the general syntax is:

     :METHOD:USER@HOSTNAME:PATH_TO_REPOSITORY

Here are examples using each of the connection methods:

   * `:ext:jrandom@floss.red-bean.com:/usr/local/newrepos' - Connects
     using `rsh', `ssh', or some other external connection program.  If
     the `$CVS_RSH' environment variable is unset, this defaults to
     `rsh'; otherwise, it uses the value of that variable.

   * `:server:jrandom@floss.red-bean.com:/usr/local/newrepos' - Like
     `:ext:', but uses CVS's internal implementation of rsh.  (This may
     not be available on all platforms.)

   * `:pserver:jrandom@floss.red-bean.com:/usr/local/newrepos' -
     Connects using the password authenticating server (see *Note The
     Password-Authenticating Server:: in *Note Repository
     Administration::; see also the *Note login:: command.)

   * `:kserver:jrandom@floss.red-bean.com:/usr/local/newrepos' -
     Connects using Kerberos authentication.

   * `:gserver:jrandom@floss.red-bean.com:/usr/local/newrepos' -
     Connects using GSSAPI authentication.

   * `:fork:jrandom@floss.red-bean.com:/usr/local/newrepos' - Connects
     to a local repository, but using the client/server network protocol
     instead of directly accessing the repository files.  This is
     useful for testing or debugging remote CVS behaviors from your
     local machine.

   * `:local:jrandom@floss.red-bean.com:/usr/local/newrepos' - Accesses
     a local repository directly, as though only the absolute path to
     the repository had been given.


`-e' EDITOR
===========

Invokes EDITOR for your commit message, if the commit message was not
specified on the command line with the -m option.  Normally, if you
don't give a message with -m, CVS invokes the editor based on the
`$CVSEDITOR', `$VISUAL', or `$EDITOR' environment variables, which it
checks in that order.  Failing that, it invokes the popular Unix editor
`vi'.

If you pass both the -e global option and the -m option to commit, the
-e is ignored in favor of the commit message given on the command line
(that way it's safe to use -e in a `.cvsrc' file).

`-f'
====

This global option suppresses reading of the `.cvsrc' file.

`--help' [COMMAND] or `-H' [COMMAND]
====================================

These two options are synonymous.  If no COMMAND is specified, a basic
usage message is printed to the standard output.  If COMMAND is
specified, a usage message for that command is printed.

`--help-options'
================

Prints out a list of all global options to CVS, with brief explanations.

`--help-synonyms'
=================

Prints out a list of CVS commands and their short forms ("up" for
"update", and so on).

`-l'
====

Suppresses logging of this command in the `CVSROOT/history' file in the
repository.  The command is still executed normally, but no record of
it is made in the history file.

`-n'
====

Doesn't change any files in the working copy or in the repository.  In
other words, the command is executed as a "dry run" - CVS goes through
most of the steps of the command but stops short of actually running it.

This is useful when you want to see what the command would have done had
you actually run it.  One common scenario is when you want to see what
files in your working directory have been modified, but not do a full
update (which would bring down changes from the repository).  By running
`cvs -n update', you can see a summary of what's been done locally,
without changing your working copy.

`-q'
====

This tells CVS to be moderately quiet by suppressing the printing of
unimportant informational messages.  What is considered "important"
depends on the command.  For example, in updates, the messages that CVS
normally prints on entering each subdirectory of the working copy are
suppressed, but the one-line status messages for modified or updated
files are still printed.

`-Q'
====

This tells CVS to be very quiet, by suppressing all output except what
is absolutely necessary to complete the command.  Commands whose sole
purpose is to produce some output (such as `diff' or `annotate'), of
course, still give that output.  However, commands that could have an
effect independent of any messages that they may print (such as
`update' or `commit') print nothing.

`-r'
====

Causes new working files to be created read-only (the same effect as
setting the `$CVSREAD' environment variable).

If you pass this option, checkouts and updates make the files in your
working copy read-only (assuming your operating system permits it).
Frankly, I'm not sure why one would ever want to use this option.

`-s' VARIABLE`='VALUE
=====================

This sets an internal CVS variable named VARIABLE to VALUE.

On the repository side, the `CVSROOT/*info' trigger files can expand
such variables to values that were assigned in the -s option.  For
example, if `CVSROOT/loginfo' contains a line like this

     myproj  /usr/local/bin/foo.pl ${=FISH}

and someone runs a commit from a myproj working copy like this

     floss$ cvs -s FISH=carp commit -m "fixed the bait bug"

the `foo.pl' script is invoked with `carp' as an argument.  Note the
funky syntax, though: The dollar sign, equal sign, and curly braces are
all necessary - if any of them are missing, the expansion will not take
place (at least not as intended).  Variable names may contain
alphanumerics and underscores only.  Although it is not required that
they consist entirely of capital letters, most people do seem to follow
that convention.

You can use the -s flag as many times as you like in a single command.
However, if the trigger script refers to variables that aren't set in a
particular invocation of CVS, the command still succeeds, but none of
the variables are expanded, and the user sees a warning.  For example,
if loginfo has this

     myproj  /usr/local/bin/foo.pl  ${=FISH}  ${=BIRD}

but the same command as before is run

     floss$ cvs -s FISH=carp commit -m "fixed the bait bug"

the person running the command sees a warning something like this
(placed last in the output)

     loginfo:31: no such user variable ${=BIRD}

and the `foo.pl' script is invoked with no arguments.  But if this
command were run

     floss$ cvs -s FISH=carp -s BIRD=vulture commit -m "fixed the bait bug"

there would be no warning, and both `${=FISH}' and `${=BIRD}' in
loginfo would be correctly expanded.  In either case, the commit itself
would still succeed.

Although these examples all use `commit', variable expansion can be
done with any CVS command that can be noticed in a `CVSROOT/' trigger
file - which is why the -s option is global.

(See the section *Note Repository Administrative Files:: later in this
chapter for more details about variable expansion in trigger files.)

`-T' DIR
========

Stores any temporary files in DIR instead of wherever CVS normally puts
them (specifically, this overrides the value of the `$TMPDIR'
environment variable, if any exists).  DIR should be an absolute path.

This option is useful when you don't have write permission (and,
therefore, CVS doesn't either) to the usual temporary locations.

`-t'
====

Traces the execution of a CVS command.  This causes CVS to print
messages showing the steps that it's going through to complete a
command.  You may find it particularly useful in conjunction with the -n
global option, to preview the effects of an unfamiliar command before
running it for real.  It can also be handy when you're trying to
discover why a command failed.

`-v' or `--version'
===================

Causes CVS to print out its version and copyright information and then
exit with no error.

`-w'
====

Causes new working files to be created read-write (overrides any setting
of the `$CVSREAD' environment variable).  Because files are created
read-write by default anyway, this option is rarely used.

If both -r and -w are passed, -w dominates.

`-x'
====

Encrypts all communications with the server.  This option has no effect
unless you're connecting via the GSSAPI server (gserver).  GSSAPI
connections are not covered in this book, because they're still somewhat
rarely used (although that may change).  (See the nodes `Global
Options' and `GSSAPI Authenticated' in the Cederqvist manual for more
information.)

`-z' GZIPLEVEL
==============

Sets the compression level on communications with the server.  The
argument GZIPLEVEL must be a number from 1 to 9.  Level 1 is minimal
compression (very fast, but doesn't compress much); Level 9 is highest
compression (uses a lot of CPU time, but sure does squeeze the data).
Level 9 is only useful on very slow network connections.  Most people
find levels between 3 and 5 to be most beneficial.

A space between -z and its argument is optional.


File: ossdev.info,  Node: add,  Next: admin,  Prev: Global Options,  Up: Commands And Options

add
---

Synopsis: add [OPTIONS] FILES

   * Alternate names - ad, new

   * Requires - Working copy, repository

   * Changes - Working copy

Adds a new file or files to an existing project.  Although the
repository is contacted for confirmation, the file does not actually
appear in it until a subsequent commit is performed.  (See also *Note
remove:: and *Note import::.)

Options:

   * -kKEYWORD_SUBSTITUTION_MODE - Specifies that the file is to be
     stored with the given RCS keyword substitution mode.  There is no
     space between the -k and its argument.  (See the section *Note
     Keyword Substitution (RCS Keywords):: later in this chapter for a
     list of valid modes and examples.)

   * -m MESSAGE - Records MESSAGE as the creation message, or
     description, for the file.  This is different from a per-revision
     log message - each file has only one description.  Descriptions
     are optional.

     As of version 1.10.7, there is a bug in CVS whereby the
     description is lost if you add a file via client/server CVS.  The
     rest of the add process seems to work fine, however, if that's any
     comfort.



File: ossdev.info,  Node: admin,  Next: annotate,  Prev: add,  Up: Commands And Options

admin
-----

Synopsis: admin [OPTIONS] [FILES]

   * Alternate names - adm, rcs

   * Requires - Working copy, repository

   * Changes - Repository

This command is an interface to various administrative tasks -
specifically, tasks applicable to individual RCS files in the
repository, such as changing a file's keyword substitution mode or
changing a log message after it's been committed.

Although admin behaves recursively if no files are given as arguments,
you normally will want to name files explicitly.  It's very rare for a
single admin command to be meaningful when applied to all files in a
project, or even in a directory.  Accordingly, when the following
explanations refer to the "file", they mean the file or (rarely) files
passed as arguments to the admin command.

If there is a system group named `cvsadmin' on the repository machine,
only members of that group can run admin (with the exception of the
`cvs admin -k' command, which is always permitted).  Thus you can
disallow admin for all users by setting the group to have no users.

Options:

   * -AOLDFILE - (Obsolete) Appends the RCS access list of OLDFILE to
     the access list of the file that is the argument to admin.  CVS
     ignores RCS access lists, so this option is useless.

   * -a USER1 [,USER2...] - (Obsolete) Appends the users in the
     comma-separated list to the access list of the file.  Like -A, this
     option is useless in CVS.

   * -bREV - Sets the revision of the file's default branch (usually the
     trunk) to REV.  You won't normally need this option, because you
     can usually get the revisions you need via sticky tags, but you
     may use it to revert to a vendor's version if you're using vendor
     branches.  There should be no space between the -b and its
     argument.

   * -cCOMMENT_PREFIX - (Obsolete) Sets the comment leader of the file
     to COMMENT_PREFIX.  The comment leader is not used by CVS or even
     by recent versions of RCS; therefore, this option is useless and
     is included only for backward-compatibility.

   * -eUSER1[,USER2...] - (Obsolete) Removes the usernames appearing in
     the comma-separated list from the access list of the RCS file.
     Like -a and -A, this option is now useless in CVS.

   * -i or -I - These two are so obsolete I'm not even going to tell you
     what they used to do.  (See the Cederqvist manual if you're
     curious.)

   * -kMODE - Sets the file's default keyword substitution mode to MODE.
     This option behaves like the -k option to add, only it gives you a
     way to change a file's mode after it's been added.  (See the
     section *Note Keyword Substitution (RCS Keywords):: later in this
     chapter for valid modes.)  There should be no space between -k and
     its argument.

   * -L - Sets locking to `strict'.  (See -l below.)

   * -l[REV] - Locks the file's revision to REV.  If REV is omitted, it
     locks the latest revision on the default branch (usually the
     trunk).  If REV is a branch, it locks the latest revision on that
     branch.

     The intent of this option is to give you a way to do "reserved
     checkouts", where only one user can be editing the file at a time.
     I'm not sure how useful this really is, but if you want to try
     it, you should probably do so in conjunction with the rcslock.pl
     script in the CVS source distribution's contrib/ directory.  See
     comments in that file for further information.  Among other
     things, those comments indicate that the locking must be set to
     `strict'.  (See -L.)  There is no space between -l and its
     argument.

   * -mREV:MESSAGE - Changes the log message for revision REV to
     MESSAGE.  Very handy - along with -k, this is probably the most
     frequently used admin option.  There are no spaces between option
     and arguments or around the colon between the two arguments.  Of
     course, MESSAGE may contain spaces within itself (in which case,
     remember to surround it with quotes so the shell knows it's all
     one thing).

   * -NNAME[:[REV]] - Just like -n, except it forces the override of any
     existing assignment of the symbolic name NAME, instead of exiting
     with error.

   * -nNAME[:[REV]] - This is a generic interface to assigning,
     renaming, and deleting tags.  There is no reason, as far as I can
     see, to prefer it to the tag command and the various options
     available there (-d, -r, -b, -f, and so on).  I recommend using
     the tag command instead.  The NAME and optional REV can be
     combined in the following ways:

        * If only the NAME argument is given, the symbolic name (tag)
          named NAME is deleted.

        * If NAME: is given but no REV, NAME is assigned to the latest
          revision on the default branch (usually the trunk).

        * If NAME:REV is given, NAME is assigned to that revision.  REV
          can be a symbolic name itself, in which case it is translated
          to a revision number first (can be a branch number).

        * If REV is a branch number and is followed by a period (`.'),
          NAME is attached to the highest revision on that branch.  If
          REV is just $, NAME is attached to revision numbers found in
          keyword strings in the working files.

          In all cases where a NAME is assigned, CVS exits with an
          error if there is already a tag named NAME in the file (but
          see -N).  There are no spaces between -n and its arguments.


   * -oRANGE - Deletes the revisions specified by RANGE (also known as
     "outdating", hence the -o).  Range can be specified in one of the
     following ways:

        * REV1::REV2 - Collapses all intermediate revisions between
          REV1 and REV2, so that the revision history goes directly
          from REV1 to REV2.  After this, any revisions between the two
          no longer exist, and there will be a noncontiguous jump in
          the revision number sequence.

        * ::REV - Collapses all revisions between the beginning of
          REV's branch (which may be the beginning of the trunk) and
          REV, noninclusively of course.  REV is then the first
          revision on that line.

        * REV:: - Collapses all revisions between REV and the end of
          its branch (which may be the trunk).  REV is then the last
          revision on that line.

        * REV - Deletes the revision REV (-o1.8 would be equivalent to
          -o1.7::1.9).

        * REV1:REV2 - Deletes the revisions from REV1 to REV2,
          inclusive.  They must be on the same branch.  After this, you
          cannot retrieve REV1, REV2, or any of the revisions in
          between.

        * :REV - Deletes revisions from the beginning of the branch (or
          trunk) to REV, inclusive.  (See the preceding warning.)

        * REV: - Deletes revisions from REV to the end of its branch
          (or trunk), inclusive.  (See the preceding warning.)

          None of the revisions being deleted may have branches or
          locks.  If any of the revisions have symbolic names attached,
          you have to delete them first with tag -d or admin -n.
          (Actually, right now CVS only protects against deleting
          symbolically named revisions if you're using one of the ::
          syntaxes, but the single-colon syntaxes may soon change to
          this behavior as well.)

          Instead of using this option to undo a bad commit, you should
          commit a new revision that undoes the bad change.  There are
          no spaces between -o and its arguments.


   * -q - Tells CVS to run quietly - don't print diagnostic messages
     (just like the global -q option).

   * -sSTATE[:REV] - Sets the state attribute of revision REV to STATE.
     If REV is omitted, the latest revision on the default branch
     (usually the trunk) is used.  If REV is a branch tag or number,
     the latest revision on that branch is used.

     Any string of letters or numbers is acceptable for STATE; some
     commonly used states are Exp for experimental, Stab for stable,
     and Rel for released.  (In fact, CVS sets the state to Exp when a
     file is created.)  Note that CVS uses the state dead for its own
     purposes, so don't specify that one.

     States are displayed in cvs log output, and in the $Log and $State
     RCS keywords in files.  There is no space between -s and its
     arguments.

   * -t[DESCFILE] - Replaces the description (creation message) for the
     file with the contents of DESCFILE, or reads from standard input
     if no DESCFILE is specified.

     This useful option, unfortunately, does not currently work in
     client/server CVS.  In addition, if you try it in client/server
     and omit DESCFILE, any existing description for the file is wiped
     out and replaced with the empty string.  If you need to rewrite a
     file's description, either do so using only local CVS on the same
     machine as the repository or -t-STRING (see below).  There is no
     space between -t and its argument.  DESCFILE may not begin with a
     hyphen (`-').

   * -t-STRING - Like -t, except that STRING is taken directly as the
     new description.  STRING may contain spaces, in which case you
     should surround it with quotes.  Unlike the other syntax for -t,
     this works in client/server as well as locally.

   * -U - Sets locking to nonstrict.  (See -l and -L options, discussed
     earlier.)

   * -u[REV] - Unlocks revision REV.  (See -l.)  If REV is omitted, CVS
     unlocks the latest lock held by the caller.  If REV is a branch,
     CVS unlocks the latest revision on that branch.  If someone other
     than the owner of a lock breaks the lock, a mail message is sent
     to the original locker.  The content for this message is solicited
     on standard input from the person breaking the lock.  There is no
     space between -u and its argument.

   * -VRCS_VERSION_NUMBER - (Obsolete) This used to be a way to tell
     CVS to produce RCS files acceptable to previous versions of RCS.
     Now the RCS format used by CVS is drifting away from the RCS
     format used by RCS, so this option is useless.  Specifying it
     results in an error.

   * -xSUFFIX - (Obsolete) Theoretically, this gives you a way to
     specify the suffix for RCS file names.  However, CVS and related
     tools all depend on that suffix being the default (,v), so this
     option does nothing.



File: ossdev.info,  Node: annotate,  Next: checkout,  Prev: admin,  Up: Commands And Options

annotate
--------

Synopsis: annotate [OPTIONS] [FILES]

   * Alternate name - ann

   * Requires - Working copy, repository

   * Changes - Nothing

Shows information on who last modified each line of each file and when.
Each line of output corresponds to one line of the file.  From left to
right, the line displays the revision number of the last modification of
that line, a parenthetical expression containing the user and date of
the modification, a colon, and the contents of the line in the file.

For example, if a file looks like this

     this is a test file
     it only has too lines
     I mean "two"

the annotations for that file could look like this

     1.1          (jrandom  22-Aug-99): this is a test file
     1.1          (jrandom  22-Aug-99): it only has too lines
     1.2          (jrandom  22-Aug-99): I mean "two"

from which you would know that the first two lines were in the initial
revision, and the last line was added or modified (also by jrandom) in
Revision 1.2.

Options:

   * -D DATE - Shows the annotations as of the latest revision no later
     than DATE.

   * -f - Forces use of the head revision if the specified tag or date
     is not found.  You can use this in combination with -D or -r to
     ensure that there is some output from the annotate command, even
     if only to show Revision 1.1 of the file.

   * -l - Local.  Runs in the current working directory only.  Does not
     descend into subdirectories.

   * -R - Recursive.  Descends into subdirectories (the default).  The
     point of the -R option is to override any -l option set in a
     .cvsrc file.

   * -r REV - Shows annotations as of revision REV (can be a revision
     number or a tag).



File: ossdev.info,  Node: checkout,  Next: commit,  Prev: annotate,  Up: Commands And Options

checkout
--------

Synopsis: checkout [OPTIONS] PROJECT(S)

   * Alternate names - co, get

   * Requires - Repository

   * Changes - Current directory

Checks out a module from the repository into a working copy.  The
working copy is created if it doesn't exist already and updated if it
does.  (See also *Note update::.)

Options:

   * -A - Resets any sticky tags, sticky dates, or sticky -k (RCS
     keyword substitution mode) options.  This is like the -A option to
     update and is probably more often used there than with checkout.

   * -c - Doesn't check anything out; just prints the CVSROOT/modules
     file, sorted, on standard output.  This is a good way to get an
     overview of what projects are in a repository.  However, a project
     without an entry in modules does not appear (this situation is
     quite normal because the name of the project's top-level directory
     in the repository functions as the project's "default" module
     name).

   * -D DATE - Checks out the latest revisions no later than DATE.  This
     option is sticky, so you won't be able to commit from the working
     copy without resetting the sticky date.  (See -A.)  This option
     also implies -P, described later.

   * -d DIR - Creates the working copy in a directory named DIR,
     instead of creating a directory with the same name as the
     checked-out module.  If you check out only a portion of a project
     and the portion is located somewhere beneath the project's top
     level, the locally empty intermediate directories are omitted.
     You can use -N to suppress this directory-collapsing behavior.

   * -f - Forces checkout of the head revision if the specified tag or
     date is not found.  Most often used in combination with -D or -r
     to ensure that something always gets checked out.

   * -j REV[:DATE] or -j REV1[:DATE] -j REV2[:DATE] - Joins (merges) two
     lines of development.  This is just like the -j option to update,
     where it is more commonly used. (See *Note update:: for details.)

   * -k MODE - Substitutes RCS keywords according to MODE (which can
     override the default modes for the files). (See the section *Note
     Keyword Substitution (RCS Keywords):: later in this chapter for
     valid modes.)  The mode chosen will be sticky - future updates of
     the working copy will keep that mode.

   * -l - Local.  Checks out the top-level directory of the project
     only.  Does not process subdirectories.

   * -N - Suppresses collapsing of empty directories with -d option.
     (See -d.)

   * -n - Doesn't run any checkout program that was specified with -o in
     CVSROOT/modules.  (See the section *Note Repository Administrative
     Files:: later in this chapter for more on this.)

   * -P - Prunes empty directories from the working copy (like the -P
     option to update).

   * -p - Checks files out to standard output, not into files (like the
     -p option to update).

   * -R - Checks out subdirectories as well (the default).  (See also
     the -f option.)

   * -r TAG - Checks out the project as of revision TAG (it would make
     almost no sense to specify a numeric revision for TAG, although
     CVS lets you).  This option is sticky and implies -P.

   * -s - Like -c, but shows the status of each module and sorts by
     status.  (See *Note modules:: in the section *Note Repository
     Administrative Files:: for more information.)



File: ossdev.info,  Node: commit,  Next: diff,  Prev: checkout,  Up: Commands And Options

commit
------

Synopsis: commit [OPTIONS] [FILES]

   * Alternate names - ci, com

   * Requires - Working copy, repository

   * Changes - Repository (and working copy administrative area)

Commits changes from a working copy to the repository.

Options:

   * -F MSGFILE - Uses the contents of MSGFILE for the log message
     instead of invoking an editor.  This option cannot be combined
     with -m.

   * -f - Forces commit of a new revision even if no changes have been
     made to the files.  `commit' does not recurse with this option (it
     implies -l).  You can force it to recurse with -R.

     This meaning of -f is at odds with its usual meaning ("force to
     head revision") in CVS commands.

   * -l - Local.  Commits changes from the current directory only.
     Doesn't descend into subdirectories.

   * -m MESSAGE - Uses MESSAGE as the log message instead of invoking an
     editor.  Cannot be used with -F.

   * -n - Does not run any module program. (See the section *Note
     Repository Administrative Files:: in this chapter for information
     about module programs.)

   * -R - Commits changes from subdirectories as well as from the
     current directory (the default).  This option is used only to
     counteract the effect of a -l in .cvsrc.

   * -r REV - Commits to revision REV, which must be either a branch or
     a revision on the trunk that is higher than any existing revision.
     Commits to a branch always go on the tip of the branch (extending
     it); you cannot commit to a specific revision on a branch.  Use of
     this option sets the new revision as a sticky tag on the file.
     This can be cleared with update -A.

     The -r REV option implies -f as well.  A new revision is committed
     even if there are no changes to commit.


